<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
     http://www.springframework.org/schema/context  
     http://www.springframework.org/schema/context/spring-context-4.0.xsd
     http://www.springframework.org/schema/aop 
     http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
     http://www.springframework.org/schema/rabbit
     http://www.springframework.org/schema/rabbit/spring-rabbit-1.4.xsd
     http://www.springframework.org/schema/task  
     http://www.springframework.org/schema/task/spring-task-4.1.xsd">

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:config.properties</value>
            </list>
        </property>
    </bean>
    <context:annotation-config />
    <import resource="classpath:memcahed.xml"/>
	<bean id="baseDataLogic" class="com.yijiajiao.rabbitmq.service.BaseDataLogic"/>
	<bean id="financeLogic" class="com.yijiajiao.rabbitmq.service.FinanceLogic"/>
	<bean id="msgLogic" class="com.yijiajiao.rabbitmq.service.MsgLogic"/>
	<bean id="ossLogic" class="com.yijiajiao.rabbitmq.service.OssLogic"/>
	<bean id="saleLogic" class="com.yijiajiao.rabbitmq.service.SaleLogic"/>
	<bean id="solutionLogic" class="com.yijiajiao.rabbitmq.service.SolutionLogic"/>
	<bean id="teachLogic" class="com.yijiajiao.rabbitmq.service.TeachLogic"/>
	<bean id="userLogic" class="com.yijiajiao.rabbitmq.service.UserLogic"/>
	<bean id="wareLogic" class="com.yijiajiao.rabbitmq.service.WareLogic"/>
	
	<!--配置connection-factory，指定连接rabbit server参数 -->
	<rabbit:connection-factory id="connectionFactory" username="${rabbit.username}"
                               password="${rabbit.password}" host="${rabbit.hosts}" port="${rabbit.port}"/>
		
	<!--定义rabbit template用于数据的接收和发送 -->
	<rabbit:template id="amqpTemplate"  connection-factory="connectionFactory" 
	    exchange="yijiajiao_exchange" />
		
	<!--通过指定下面的admin信息，当前producer中的exchange和queue会在rabbitmq服务器上自动生成 -->
	<!--添加这句话会报redeclare exchange错误-->
	<!--因为我们的RabbitMQ是连接远程的RabbitMQ Server 而不是本地的RabbitMQ Server，所以当我们同时配置了远程和admin，就会出现重定义了exchange路由的错误，特别是在远程的RabbitMQ Server已经有了一个同名的exchange-->
	<!--<rabbit:admin connection-factory="connectionFactory" />-->

	<!--定义queue durable:是否持久化,exclusive: 仅创建者可以使用的私有队列，断开后自动删除,auto_delete: 当所有消费客户端连接断开后，是否自动删除队列-->
	<rabbit:queue name="yijiajiao_queue" durable="true" auto-delete="false" exclusive="false" />

	<!-- 定义direct exchange，绑定queueTest -->
	<rabbit:direct-exchange name="yijiajiao_exchange" durable="true" auto-delete="false">
		<rabbit:bindings>
			<rabbit:binding queue="yijiajiao_queue" key="yijiajiao_routingkey"/>
		</rabbit:bindings>
	</rabbit:direct-exchange>
	
	<!-- 消息接收者 -->
	<bean id="messageReceiver" class="com.yijiajiao.rabbitmq.message.ReceiveMsgHandler"/>
	<bean id="messageReceiver2" class="com.yijiajiao.rabbitmq.message.ReceiveHandler"/>
	<!-- queue litener  观察 监听模式 当有消息到达时会通知监听在对应的队列上的监听对象-->
    <rabbit:listener-container connection-factory="connectionFactory" acknowledge="manual"  concurrency="25">
             <rabbit:listener queues="yijiajiao_queue" ref="messageReceiver"/>
    </rabbit:listener-container>
    <!-- 配置线程池 -->
	<bean id ="taskExecutor"  class ="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor" >
	    线程池维护线程的最少数量  
		<property name ="corePoolSize" value ="5" />
	    线程池维护线程所允许的空闲时间  
		<property name ="keepAliveSeconds" value ="30000"/>
	    线程池维护线程的最大数量  
		<property name ="maxPoolSize" value ="1000"/>
	    线程池所使用的缓冲队列  
		<property name ="queueCapacity" value ="200"/>
	</bean>
  
</beans>